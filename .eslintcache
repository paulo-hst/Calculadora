[{"C:\\Users\\paulo\\Documents\\Cursos\\React - Udemy\\calculadora\\src\\index.js":"1","C:\\Users\\paulo\\Documents\\Cursos\\React - Udemy\\calculadora\\src\\App.js":"2","C:\\Users\\paulo\\Documents\\Cursos\\React - Udemy\\calculadora\\src\\reportWebVitals.js":"3","C:\\Users\\paulo\\Documents\\Cursos\\React - Udemy\\calculadora\\src\\main\\Calculator.jsx":"4","C:\\Users\\paulo\\Documents\\Cursos\\React - Udemy\\calculadora\\src\\components\\Button.jsx":"5","C:\\Users\\paulo\\Documents\\Cursos\\React - Udemy\\calculadora\\src\\components\\Display.jsx":"6"},{"size":526,"mtime":1611282767732,"results":"7","hashOfConfig":"8"},{"size":528,"mtime":1607569432453,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1607569432453,"results":"10","hashOfConfig":"8"},{"size":4035,"mtime":1611282592159,"results":"11","hashOfConfig":"8"},{"size":508,"mtime":1611282615361,"results":"12","hashOfConfig":"8"},{"size":194,"mtime":1611276445634,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"14ypeme",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"C:\\Users\\paulo\\Documents\\Cursos\\React - Udemy\\calculadora\\src\\index.js",[],"C:\\Users\\paulo\\Documents\\Cursos\\React - Udemy\\calculadora\\src\\App.js",[],"C:\\Users\\paulo\\Documents\\Cursos\\React - Udemy\\calculadora\\src\\reportWebVitals.js",[],"C:\\Users\\paulo\\Documents\\Cursos\\React - Udemy\\calculadora\\src\\main\\Calculator.jsx",["28"],"import React, { Component } from 'react'\r\nimport './Calculator.css'\r\n\r\nimport Button from '../components/Button'\r\nimport Display from '../components/Display'\r\n\r\nconst initialState = {\r\n    displayValue: '0',\r\n    clearDisplay: false,\r\n    operation: null,\r\n    values: [ 0, 0 ],\r\n    current: 0,\r\n}\r\n\r\nexport default class Calculator extends Component{\r\n\r\n    state = { ...initialState } // 'clona' a constante initialState e joga no state\r\n\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.clearMemory = this.clearMemory.bind(this)\r\n        this.setOperation = this.setOperation.bind(this)\r\n        this.addDigit = this.addDigit.bind(this)\r\n    }\r\n\r\n    clearMemory(){\r\n        this.setState({ ...initialState })\r\n    }\r\n\r\n    setOperation(operation){\r\n        if(this.state.current === 0){\r\n            // altera os valores do estado state quando for o segundo valor da opreação\r\n            this.setState({ operation, clearDisplay: true, current: 1 })\r\n        }else{\r\n            const equals = operation === '='\r\n            const currentOperation = this.state.operation\r\n\r\n            const values = { ...this.state.values }\r\n\r\n            try{\r\n                // calculo realizado pelo app\r\n                values[0] = eval(`${values[0]} ${currentOperation} ${values[1]}`)\r\n                \r\n            } catch(erro){\r\n                values[0] = this.state.values\r\n            }\r\n\r\n            values[1] = 0\r\n\r\n            // exibir resultado do calculo\r\n            this.setState({ \r\n                displayValue: values[0], \r\n                operation: equals ? null : operation, \r\n                current: equals ? 0 : 1,\r\n                clearDisplay: !equals,\r\n                values\r\n            })\r\n        }\r\n    }\r\n\r\n    addDigit(n){\r\n        // regra que evita utilização de dois pontos em um número real\r\n        if ( n === '.' && this.state.displayValue.includes('.') ){\r\n            return \r\n        }\r\n\r\n        const clearDisplay = this.state.displayValue === '0' || this.state.clearDisplay\r\n        const currentValue = clearDisplay ? '' : this.state.displayValue\r\n        const displayValue = currentValue + n \r\n        this.setState({ displayValue, clearDisplay: false })\r\n\r\n        if(n !== '.'){\r\n            const i = this.state.current // recebe o indice do valor a ser alterado\r\n            const newValue = parseFloat(displayValue) // converter para float o valor exibido no display\r\n            const values = [ ...this.state.values ] // clonado o conteúdo do state para a constante values\r\n            values[i] = newValue // alteração do valor atual do values (pode ser índice 0 ou 1)\r\n            this.setState({ values }) // retornou para o state os valores alterados\r\n        }\r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"calculator\">\r\n                <Display value={this.state.displayValue} />\r\n                <Button label=\"AC\" click={this.clearMemory} triple />\r\n                <Button label=\"/\" click={this.setOperation} operation />\r\n                <Button label=\"7\" click={this.addDigit} />\r\n                <Button label=\"8\" click={this.addDigit} />\r\n                <Button label=\"9\" click={this.addDigit} />\r\n                <Button label=\"*\" click={this.setOperation} operation />\r\n                <Button label=\"4\" click={this.addDigit} />\r\n                <Button label=\"5\" click={this.addDigit} />\r\n                <Button label=\"6\" click={this.addDigit} />\r\n                <Button label=\"-\" click={this.setOperation} operation />\r\n                <Button label=\"1\" click={this.addDigit} />\r\n                <Button label=\"2\" click={this.addDigit} />\r\n                <Button label=\"3\" click={this.addDigit} />\r\n                <Button label=\"+\" click={this.setOperation} operation />\r\n                <Button label=\"0\" click={this.addDigit} double />\r\n                <Button label=\".\" click={this.addDigit} />\r\n                <Button label=\"=\" click={this.setOperation} operation />\r\n            </div>\r\n        )\r\n    }\r\n}",["29","30"],"C:\\Users\\paulo\\Documents\\Cursos\\React - Udemy\\calculadora\\src\\components\\Button.jsx",[],"C:\\Users\\paulo\\Documents\\Cursos\\React - Udemy\\calculadora\\src\\components\\Display.jsx",[],{"ruleId":"31","severity":1,"message":"32","line":43,"column":29,"nodeType":"33","messageId":"34","endLine":43,"endColumn":33},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},"no-eval","eval can be harmful.","CallExpression","unexpected","no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-global-assign","no-unsafe-negation"]